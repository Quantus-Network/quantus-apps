// Mocks generated by Mockito 5.4.6 from annotations
// in resonance_network_wallet/test/unit/wallet_state_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:polkadart/polkadart.dart' as _i5;
import 'package:quantus_sdk/quantus_sdk.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDilithiumWalletInfo_0 extends _i1.SmartFake
    implements _i2.DilithiumWalletInfo {
  _FakeDilithiumWalletInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeypair_1 extends _i1.SmartFake implements _i2.Keypair {
  _FakeKeypair_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSortedTransactionsList_2 extends _i1.SmartFake
    implements _i2.SortedTransactionsList {
  _FakeSortedTransactionsList_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i2.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setAccountId(String? accountId) =>
      (super.noSuchMethod(
            Invocation.method(#setAccountId, [accountId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String?> getAccountId() =>
      (super.noSuchMethod(
            Invocation.method(#getAccountId, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<void> clearAccountId() =>
      (super.noSuchMethod(
            Invocation.method(#clearAccountId, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setWalletName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#setWalletName, [name]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String?> getWalletName() =>
      (super.noSuchMethod(
            Invocation.method(#getWalletName, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<void> setHasWallet(bool? hasWallet) =>
      (super.noSuchMethod(
            Invocation.method(#setHasWallet, [hasWallet]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> getHasWallet() =>
      (super.noSuchMethod(
            Invocation.method(#getHasWallet, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> setMnemonic(String? mnemonic) =>
      (super.noSuchMethod(
            Invocation.method(#setMnemonic, [mnemonic]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String?> getMnemonic() =>
      (super.noSuchMethod(
            Invocation.method(#getMnemonic, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<void> clearMnemonic() =>
      (super.noSuchMethod(
            Invocation.method(#clearMnemonic, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setReversibleTimeSeconds(int? seconds) =>
      (super.noSuchMethod(
            Invocation.method(#setReversibleTimeSeconds, [seconds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int?> getReversibleTimeSeconds() =>
      (super.noSuchMethod(
            Invocation.method(#getReversibleTimeSeconds, []),
            returnValue: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);

  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SubstrateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubstrateService extends _i1.Mock implements _i2.SubstrateService {
  MockSubstrateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i2.ConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i3.Stream<_i2.ConnectionStatus>.empty(),
          )
          as _i3.Stream<_i2.ConnectionStatus>);

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> reconnect() =>
      (super.noSuchMethod(
            Invocation.method(#reconnect, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<BigInt> getFee(
    String? senderAddress,
    String? recipientAddress,
    BigInt? amount,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getFee, [
              senderAddress,
              recipientAddress,
              amount,
            ]),
            returnValue: _i3.Future<BigInt>.value(
              _i4.dummyValue<BigInt>(
                this,
                Invocation.method(#getFee, [
                  senderAddress,
                  recipientAddress,
                  amount,
                ]),
              ),
            ),
          )
          as _i3.Future<BigInt>);

  @override
  _i3.Future<_i2.DilithiumWalletInfo> generateWalletFromSeed(
    String? seedPhrase,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateWalletFromSeed, [seedPhrase]),
            returnValue: _i3.Future<_i2.DilithiumWalletInfo>.value(
              _FakeDilithiumWalletInfo_0(
                this,
                Invocation.method(#generateWalletFromSeed, [seedPhrase]),
              ),
            ),
          )
          as _i3.Future<_i2.DilithiumWalletInfo>);

  @override
  _i3.Future<BigInt> queryUserBalance() =>
      (super.noSuchMethod(
            Invocation.method(#queryUserBalance, []),
            returnValue: _i3.Future<BigInt>.value(
              _i4.dummyValue<BigInt>(
                this,
                Invocation.method(#queryUserBalance, []),
              ),
            ),
          )
          as _i3.Future<BigInt>);

  @override
  _i3.Future<BigInt> queryBalance(String? address) =>
      (super.noSuchMethod(
            Invocation.method(#queryBalance, [address]),
            returnValue: _i3.Future<BigInt>.value(
              _i4.dummyValue<BigInt>(
                this,
                Invocation.method(#queryBalance, [address]),
              ),
            ),
          )
          as _i3.Future<BigInt>);

  @override
  _i2.Keypair dilithiumKeypairFromMnemonic(String? senderSeed) =>
      (super.noSuchMethod(
            Invocation.method(#dilithiumKeypairFromMnemonic, [senderSeed]),
            returnValue: _FakeKeypair_1(
              this,
              Invocation.method(#dilithiumKeypairFromMnemonic, [senderSeed]),
            ),
          )
          as _i2.Keypair);

  @override
  _i3.Future<String> submitExtrinsic(
    String? senderSeed,
    _i2.RuntimeCall? call, {
    void Function(_i5.ExtrinsicStatus)? onStatus,
    int? maxRetries = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #submitExtrinsic,
              [senderSeed, call],
              {#onStatus: onStatus, #maxRetries: maxRetries},
            ),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(
                  #submitExtrinsic,
                  [senderSeed, call],
                  {#onStatus: onStatus, #maxRetries: maxRetries},
                ),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> generateMnemonic() =>
      (super.noSuchMethod(
            Invocation.method(#generateMnemonic, []),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#generateMnemonic, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  bool isValidSS58Address(String? address) =>
      (super.noSuchMethod(
            Invocation.method(#isValidSS58Address, [address]),
            returnValue: false,
          )
          as bool);

  @override
  String bytesToHex(_i6.Uint8List? bytes) =>
      (super.noSuchMethod(
            Invocation.method(#bytesToHex, [bytes]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#bytesToHex, [bytes]),
            ),
          )
          as String);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ChainHistoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChainHistoryService extends _i1.Mock
    implements _i2.ChainHistoryService {
  MockChainHistoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.SortedTransactionsList> fetchAllTransactionTypes({
    required String? accountId,
    int? limit = 10,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAllTransactionTypes, [], {
              #accountId: accountId,
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i3.Future<_i2.SortedTransactionsList>.value(
              _FakeSortedTransactionsList_2(
                this,
                Invocation.method(#fetchAllTransactionTypes, [], {
                  #accountId: accountId,
                  #limit: limit,
                  #offset: offset,
                }),
              ),
            ),
          )
          as _i3.Future<_i2.SortedTransactionsList>);

  @override
  _i3.Future<List<_i2.ReversibleTransferEvent>> fetchScheduledTransfers({
    required String? accountId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchScheduledTransfers, [], {
              #accountId: accountId,
            }),
            returnValue: _i3.Future<List<_i2.ReversibleTransferEvent>>.value(
              <_i2.ReversibleTransferEvent>[],
            ),
          )
          as _i3.Future<List<_i2.ReversibleTransferEvent>>);
}
