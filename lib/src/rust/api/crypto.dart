// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `to_account_id`

/// Convert public key to accountId32 in ss58check format
String toAccountId({required Keypair obj}) =>
    RustLib.instance.api.crateApiCryptoToAccountId(obj: obj);

Keypair generateKeypair({required String mnemonicStr}) => RustLib.instance.api
    .crateApiCryptoGenerateKeypair(mnemonicStr: mnemonicStr);

Keypair generateKeypairFromSeed({required List<int> seed}) =>
    RustLib.instance.api.crateApiCryptoGenerateKeypairFromSeed(seed: seed);

Uint8List signMessage({required Keypair keypair, required List<int> message}) =>
    RustLib.instance.api
        .crateApiCryptoSignMessage(keypair: keypair, message: message);

bool verifyMessage(
        {required Keypair keypair,
        required List<int> message,
        required List<int> signature}) =>
    RustLib.instance.api.crateApiCryptoVerifyMessage(
        keypair: keypair, message: message, signature: signature);

Keypair crystalAlice() => RustLib.instance.api.crateApiCryptoCrystalAlice();

Keypair crystalBob() => RustLib.instance.api.crateApiCryptoCrystalBob();

Keypair crystalCharlie() => RustLib.instance.api.crateApiCryptoCrystalCharlie();

class Keypair {
  final Uint8List publicKey;
  final Uint8List secretKey;

  const Keypair({
    required this.publicKey,
    required this.secretKey,
  });

  @override
  int get hashCode => publicKey.hashCode ^ secretKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Keypair &&
          runtimeType == other.runtimeType &&
          publicKey == other.publicKey &&
          secretKey == other.secretKey;
}
